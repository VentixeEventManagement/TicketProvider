// This was completely generated by AI
using System.Net;
using System.Net.Http.Json;
using System.Threading.Tasks;
using Xunit;

namespace TicketProvider.Tests
{
    public class ApiTests : IClassFixture<CustomWebApplicationFactory>
    {
        private readonly HttpClient _client;

        public ApiTests(CustomWebApplicationFactory factory)
        {
            _client = factory.CreateClient();
        }

        [Fact]
        public async Task GetTickets_ReturnsSuccess()
        {
            var response = await _client.GetAsync("/api/ticket");
            Assert.True(response.IsSuccessStatusCode);
        }

        [Fact]
        public async Task GetTicketById_ValidId_ReturnsTicket()
        {
            var response = await _client.GetAsync("/api/ticket/1");
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }

        [Fact]
        public async Task GetTicketById_InvalidId_ReturnsNotFound()
        {
            var response = await _client.GetAsync("/api/ticket/999");
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Fact]
        public async Task GetTicketsByEventId_ValidEventId_ReturnsTickets()
        {
            var response = await _client.GetAsync("/api/ticket/by-event/1");
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }

        [Fact]
        public async Task GetTicketsByEventId_InvalidEventId_ReturnsNotFound()
        {
            var response = await _client.GetAsync("/api/ticket/by-event/999");
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Fact]
        public async Task CreateTicket_ValidData_ReturnsCreated()
        {
            var newTicket = new
            {
                EventId = 1,
                HolderName = "Integration Test User",
                HolderEmail = "integration@example.com",
                Price = 42.0m
            };
            var response = await _client.PostAsJsonAsync("/api/ticket", newTicket);
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
        }

        [Fact]
        public async Task DeleteTicket_InvalidId_ReturnsNotFound()
        {
            var response = await _client.DeleteAsync("/api/ticket/999");
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }
    }
}
