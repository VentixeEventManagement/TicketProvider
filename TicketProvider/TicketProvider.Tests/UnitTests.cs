// This was completely generated by AI
using Xunit;
using Moq;
using TicketProvider.Controllers;
using TicketProvider.Business.Interfaces;
using TicketProvider.Business.Models;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Collections.Generic;
using System;
using System.Net.Sockets;

namespace TicketProvider.Tests
{
    public class TicketControllerTests
    {
        [Fact]
        public async Task GetTicketById_ReturnsOk_WhenTicketExists()
        {
            // Arrange
            var mockService = new Mock<ITicketService>();
            var ticket = new Ticket { Id = 1, HolderName = "Test User" };
            mockService.Setup(s => s.GetTicketByIdAsync(1)).ReturnsAsync(ticket);
            var mockLogger = new Mock<ILogger<TicketController>>();
            var controller = new TicketController(mockService.Object, mockLogger.Object);

            // Act
            var result = await controller.GetTicketById(1);

            // Assert
            var okResult = Assert.IsType<OkObjectResult>(result);
            Assert.Equal(ticket, okResult.Value);
        }

        [Fact]
        public async Task GetTicketById_ReturnsNotFound_WhenTicketDoesNotExist()
        {
            // Arrange
            var mockService = new Mock<ITicketService>();
            mockService.Setup(s => s.GetTicketByIdAsync(1)).ReturnsAsync((Ticket?)null);
            var mockLogger = new Mock<ILogger<TicketController>>();
            var controller = new TicketController(mockService.Object, mockLogger.Object);

            // Act
            var result = await controller.GetTicketById(1);

            // Assert
            Assert.IsType<NotFoundObjectResult>(result);
        }

        [Fact]
        public async Task Create_ReturnsBadRequest_WhenModelStateInvalid()
        {
            // Arrange
            var mockService = new Mock<ITicketService>();
            var mockLogger = new Mock<ILogger<TicketController>>();
            var controller = new TicketController(mockService.Object, mockLogger.Object);
            controller.ModelState.AddModelError("HolderName", "Required");
            var form = new TicketRegistrationModel { HolderName = "" };

            // Act
            var result = await controller.Create(form);

            // Assert
            Assert.IsType<BadRequestObjectResult>(result);
        }

        [Fact]
        public async Task Create_ReturnsCreated_WhenServiceReturnsTrue()
        {
            // Arrange
            var mockService = new Mock<ITicketService>();
            var form = new TicketRegistrationModel
            {
                HolderName = "Test User",
                HolderEmail = "test@example.com",
                EventId = 1
            };
            mockService.Setup(s => s.CreateTicketAsync(form)).ReturnsAsync(true);
            var mockLogger = new Mock<ILogger<TicketController>>();
            var controller = new TicketController(mockService.Object, mockLogger.Object);

            // Act
            var result = await controller.Create(form);

            // Assert
            Assert.IsType<CreatedResult>(result);
        }

        [Fact]
        public async Task Create_ReturnsServerError_WhenServiceReturnsFalse()
        {
            // Arrange
            var mockService = new Mock<ITicketService>();
            var form = new TicketRegistrationModel
            {
                HolderName = "Test User",
                HolderEmail = "test@example.com",
                EventId = 1
            };
            mockService.Setup(s => s.CreateTicketAsync(form)).ReturnsAsync(false);
            var mockLogger = new Mock<ILogger<TicketController>>();
            var controller = new TicketController(mockService.Object, mockLogger.Object);

            // Act
            var result = await controller.Create(form);

            // Assert
            var statusCodeResult = Assert.IsType<ObjectResult>(result);
            Assert.Equal(500, statusCodeResult.StatusCode);
        }

        [Fact]
        public async Task EditTicket_ReturnsBadRequest_WhenModelStateInvalid()
        {
            // Arrange
            var mockService = new Mock<ITicketService>();
            var mockLogger = new Mock<ILogger<TicketController>>();
            var controller = new TicketController(mockService.Object, mockLogger.Object);
            controller.ModelState.AddModelError("HolderName", "Required");
            var form = new TicketRegistrationModel { HolderName = "" };

            // Act
            var result = await controller.EditTicket(1, form);

            // Assert
            Assert.IsType<BadRequestObjectResult>(result);
        }

        [Fact]
        public async Task EditTicket_ReturnsOk_WhenServiceReturnsTrue()
        {
            // Arrange
            var mockService = new Mock<ITicketService>();
            var form = new TicketRegistrationModel
            {
                HolderName = "Test User",
                HolderEmail = "test@example.com",
                EventId = 1
            };
            mockService.Setup(s => s.EditTicketAsync(1, form)).ReturnsAsync(true);
            var mockLogger = new Mock<ILogger<TicketController>>();
            var controller = new TicketController(mockService.Object, mockLogger.Object);

            // Act
            var result = await controller.EditTicket(1, form);

            // Assert
            var okResult = Assert.IsType<OkObjectResult>(result);
            Assert.Equal("Ticket was updated successfully.", okResult.Value);
        }

        [Fact]
        public async Task EditTicket_ReturnsNotFound_WhenServiceReturnsFalse()
        {
            // Arrange
            var mockService = new Mock<ITicketService>();
            var form = new TicketRegistrationModel
            {
                HolderName = "Test User",
                HolderEmail = "test@example.com",
                EventId = 1
            };
            mockService.Setup(s => s.EditTicketAsync(1, form)).ReturnsAsync(false);
            var mockLogger = new Mock<ILogger<TicketController>>();
            var controller = new TicketController(mockService.Object, mockLogger.Object);

            // Act
            var result = await controller.EditTicket(1, form);

            // Assert
            Assert.IsType<NotFoundObjectResult>(result);
        }

        [Fact]
        public async Task DeleteTicket_ReturnsOk_WhenServiceReturnsTrue()
        {
            // Arrange
            var mockService = new Mock<ITicketService>();
            mockService.Setup(s => s.DeleteTicketAsync(1)).ReturnsAsync(true);
            var mockLogger = new Mock<ILogger<TicketController>>();
            var controller = new TicketController(mockService.Object, mockLogger.Object);

            // Act
            var result = await controller.DeleteTicket(1);

            // Assert
            var okResult = Assert.IsType<OkObjectResult>(result);
            Assert.Equal("Ticket was deleted successfully.", okResult.Value);
        }

        [Fact]
        public async Task DeleteTicket_ReturnsNotFound_WhenServiceReturnsFalse()
        {
            // Arrange
            var mockService = new Mock<ITicketService>();
            mockService.Setup(s => s.DeleteTicketAsync(1)).ReturnsAsync(false);
            var mockLogger = new Mock<ILogger<TicketController>>();
            var controller = new TicketController(mockService.Object, mockLogger.Object);

            // Act
            var result = await controller.DeleteTicket(1);

            // Assert
            Assert.IsType<NotFoundObjectResult>(result);
        }

        [Fact]
        public async Task Create_ReturnsServerError_WhenServiceThrowsException()
        {
            // Arrange
            var mockService = new Mock<ITicketService>();
            var form = new TicketRegistrationModel
            {
                HolderName = "Test User",
                HolderEmail = "test@example.com",
                EventId = 1
            };
            mockService.Setup(s => s.CreateTicketAsync(form)).ThrowsAsync(new Exception("Service error"));
            var mockLogger = new Mock<ILogger<TicketController>>();
            var controller = new TicketController(mockService.Object, mockLogger.Object);

            // Act
            var result = await controller.Create(form);

            // Assert
            var statusCodeResult = Assert.IsType<ObjectResult>(result);
            Assert.Equal(500, statusCodeResult.StatusCode);
        }

        [Fact]
        public async Task GetTicketById_ReturnsBadRequest_WhenIdIsZeroOrNegative()
        {
            // Arrange
            var mockService = new Mock<ITicketService>();
            var mockLogger = new Mock<ILogger<TicketController>>();
            var controller = new TicketController(mockService.Object, mockLogger.Object);

            // Act
            var result = await controller.GetTicketById(0);

            // Assert
            Assert.IsType<BadRequestObjectResult>(result);
        }

        [Fact]
        public async Task GetTickets_ReturnsOk_WithListOfTickets()
        {
            // Arrange
            var mockService = new Mock<ITicketService>();
            var tickets = new List<Ticket>
            {
                new Ticket { Id = 1, HolderName = "User 1" },
                new Ticket { Id = 2, HolderName = "User 2" }
            };
            mockService.Setup(s => s.GetTicketsAsync()).ReturnsAsync(tickets);
            var mockLogger = new Mock<ILogger<TicketController>>();
            var controller = new TicketController(mockService.Object, mockLogger.Object);

            // Act
            var result = await controller.GetTickets();

            // Assert
            var okResult = Assert.IsType<OkObjectResult>(result);
            var returnedTickets = Assert.IsAssignableFrom<IEnumerable<Ticket>>(okResult.Value);
            Assert.Equal(2, returnedTickets.Count());
        }

        [Fact]
        public async Task GetTicketsByEventId_ReturnsOk_WhenTicketsExist()
        {
            // Arrange
            var mockService = new Mock<ITicketService>();
            var tickets = new List<Ticket>
            {
                new Ticket { Id = 1, EventId = 5, HolderName = "User 1" },
                new Ticket { Id = 2, EventId = 5, HolderName = "User 2" }
            };
            mockService.Setup(s => s.GetTicketsByEventIdAsync(5)).ReturnsAsync(tickets);
            var mockLogger = new Mock<ILogger<TicketController>>();
            var controller = new TicketController(mockService.Object, mockLogger.Object);

            // Act
            var result = await controller.GetTicketsByEventId(5);

            // Assert
            var okResult = Assert.IsType<OkObjectResult>(result);
            var returnedTickets = Assert.IsAssignableFrom<IEnumerable<Ticket>>(okResult.Value);
            Assert.Equal(2, returnedTickets.Count());
        }
    }
}
