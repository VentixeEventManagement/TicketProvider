// This was completely generated by AI
using System;
using System.Linq;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using TicketProvider.Data.Contexts;
using TicketProvider.Data.Entities;

namespace TicketProvider.Tests
{
    /// <summary>
    /// Custom WebApplicationFactory for integration testing.
    /// Configures the test host to use an in-memory database and seeds test data.
    /// </summary>
    public class CustomWebApplicationFactory : WebApplicationFactory<Program>
    {
        protected override void ConfigureWebHost(IWebHostBuilder builder)
        {
            builder.UseEnvironment("Testing");

            builder.ConfigureServices(services =>
            {
                // Remove the app's TicketContext registration.
                var descriptor = services.SingleOrDefault(
                    d => d.ServiceType == typeof(DbContextOptions<TicketContext>));
                if (descriptor != null)
                    services.Remove(descriptor);

                // Register the in-memory database for testing.
                services.AddDbContext<TicketContext>(options =>
                    options.UseInMemoryDatabase("InMemoryTestDb"));

                // Build the service provider.
                var sp = services.BuildServiceProvider();

                // Create a scope to obtain a reference to the database context.
                using (var scope = sp.CreateScope())
                {
                    var db = scope.ServiceProvider.GetRequiredService<TicketContext>();
                    db.Database.EnsureCreated();
                    try
                    {
                        InitializeDbForTests(db);
                    }
                    catch (Exception ex)
                    {
                        var logger = scope.ServiceProvider.GetRequiredService<ILogger<CustomWebApplicationFactory>>();
                        logger.LogError(ex, "An error occurred seeding the database. Error: {Message}", ex.Message);
                    }
                }
            });
        }

        /// <summary>
        /// Seeds the in-memory database with test data.
        /// </summary>
        private void InitializeDbForTests(TicketContext context)
        {
            // Clear existing data
            context.Tickets.RemoveRange(context.Tickets);
            context.SaveChanges();

            // Add test data
            context.Tickets.AddRange(
                new TicketEntity
                {
                    Id = 1,
                    EventId = 1,
                    HolderName = "Test User 1",
                    HolderEmail = "test1@example.com",
                    PurchaseDate = DateTime.Now.AddDays(-5),
                    Price = 50.00m
                },
                new TicketEntity
                {
                    Id = 2,
                    EventId = 1,
                    HolderName = "Test User 2",
                    HolderEmail = "test2@example.com",
                    PurchaseDate = DateTime.Now.AddDays(-3),
                    Price = 50.00m
                },
                new TicketEntity
                {
                    Id = 3,
                    EventId = 2,
                    HolderName = "Test User 3",
                    HolderEmail = "test3@example.com",
                    PurchaseDate = DateTime.Now.AddDays(-1),
                    Price = 75.00m
                }
            );

            context.SaveChanges();
        }
    }
}
